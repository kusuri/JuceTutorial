/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginEditor.h"


//==============================================================================
DemoPluginAudioProcessorEditor::DemoPluginAudioProcessorEditor (DemoPluginAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Firsly, we will define our UI objects.
    addAndMakeVisible(gainSlider = new ParameterSlider(*processor.gainParam, 0.0, 1.0, 0.01));
    gainSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    
    addAndMakeVisible(muteButton = new ToggleButton());
    muteButton->addListener(this);
    
    
    // Set timer
    startTimerHz(30);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
}

DemoPluginAudioProcessorEditor::~DemoPluginAudioProcessorEditor()
{
    gainSlider = nullptr;
    muteButton = nullptr;
}

//==============================================================================
void DemoPluginAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::mintcream);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Demo Plugin", getLocalBounds(), Justification::topLeft, 1);
}

void DemoPluginAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    muteButton->setBounds(100, 50, compWidth, compHeight);
    gainSlider->setBounds(100, 100, compWidth, compWidth);
}

void DemoPluginAudioProcessorEditor::mouseDown (const MouseEvent & event)
{
    if (event.eventComponent == muteButton)
        processor.muteParam->beginChangeGesture();
}

void DemoPluginAudioProcessorEditor::buttonClicked (Button *button)
{
    if (button == muteButton)
    {
        const bool muteState = muteButton->getToggleState();
        
        processor.muteParam->setValueNotifyingHost(muteState);
    }
}

void DemoPluginAudioProcessorEditor::mouseUp (const MouseEvent & event)
{
    if (event.eventComponent == muteButton)
        processor.muteParam->endChangeGesture();
}

void DemoPluginAudioProcessorEditor::updateMuteButtonText(bool state)
{
    state == true ? muteButton->setButtonText("OFF") : muteButton->setButtonText("ON");
}

void DemoPluginAudioProcessorEditor::timerCallback()
{
    bool muteState = processor.muteParam->get();
    
    muteButton->setToggleState(muteState, NotificationType::dontSendNotification);
    updateMuteButtonText(muteState);
}

