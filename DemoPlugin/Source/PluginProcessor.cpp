/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
DemoPluginAudioProcessor::DemoPluginAudioProcessor()
{
    // The base class constructor will already add a main stereo output bus
    // If you want to add your own main channel then simply call clear the
    // output buses (busArrangement.outputBuses.clear()) and then add your own
    
    
    /*
     Define the plugin parameters.
     The parameter object will be managed and deleted automatically by the list when no longer needed.
     */
    addParameter (gainParam  = new AudioParameterFloat ("gain",  "Gain", 0.0f, 1.0f, 1.0f));
    addParameter (delayParam = new AudioParameterFloat ("delay", "Delay Feedback", 0.0f, 1.0f, 0.5f));
    addParameter (muteParam = new AudioParameterBool("mute", "Mute Audio", true));
}

DemoPluginAudioProcessor::~DemoPluginAudioProcessor()
{
}

bool DemoPluginAudioProcessor::setPreferredBusArrangement (bool isInputBus, int busIndex,
                                 const AudioChannelSet& preferred) 
{
    const int numChannels = preferred.size();
    
    // do not allow disabling channels
    if (numChannels == 0) return false;

    // support only mono and stereo channels
    if ((numChannels > 2)) return false;
    
    // always have the same channel layout on both input and output on the main bus
    if (! AudioProcessor::setPreferredBusArrangement (! isInputBus, busIndex, preferred))
        return false;
    
    return AudioProcessor::setPreferredBusArrangement (isInputBus, busIndex, preferred);
}

//==============================================================================
const String DemoPluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool DemoPluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool DemoPluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool DemoPluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double DemoPluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int DemoPluginAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int DemoPluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void DemoPluginAudioProcessor::setCurrentProgram (int index)
{
}

const String DemoPluginAudioProcessor::getProgramName (int index)
{
    return String();
}

void DemoPluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void DemoPluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void DemoPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void DemoPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    const int bufferSamples = buffer.getNumSamples();
    
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        // ..do something to the data...
        
        // apply gain from gainSlider
        buffer.applyGain(channel, 0, bufferSamples, gainParam->get());
        
        // apply mute
        buffer.applyGain(channel, 0, bufferSamples, 1.0f - (float)muteParam->get());
    }
}

//==============================================================================
bool DemoPluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* DemoPluginAudioProcessor::createEditor()
{
    return new DemoPluginAudioProcessorEditor (*this);
}

//==============================================================================
void DemoPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    // Here's an example of how you can use XML to make it easy and more robust:
    
    // Create an outer XML element..
    XmlElement xml ("MYPLUGINSETTINGS");
    
    // Store the values of all our parameters, using their param ID as the XML attribute
    for (int i = 0; i < getNumParameters(); ++i)
        if (AudioProcessorParameterWithID* p = dynamic_cast<AudioProcessorParameterWithID*> (getParameters().getUnchecked(i)))
            xml.setAttribute (p->paramID, p->getValue());
    
    // then use this helper function to stuff it into the binary blob and return it..
    copyXmlToBinary (xml, destData);
}

void DemoPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    
    // This getXmlFromBinary() helper function retrieves our XML from the binary blob..
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));
    
    if (xmlState != nullptr)
    {
        // make sure that it's actually our type of XML object..
        if (xmlState->hasTagName ("MYPLUGINSETTINGS"))
        {
            // Now reload our parameters..
            for (int i = 0; i < getNumParameters(); ++i)
                if (AudioProcessorParameterWithID* p = dynamic_cast<AudioProcessorParameterWithID*> (getParameters().getUnchecked(i)))
                    p->setValueNotifyingHost ((float) xmlState->getDoubleAttribute (p->paramID, p->getValue()));
        }
    }
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new DemoPluginAudioProcessor();
}
